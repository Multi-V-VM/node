@@ -29,15 +29,25 @@
 
 using byte = uint8_t;
 
-using v8::internal::kSmiValueSize;
-using v8::internal::kSystemPointerSize;
-using v8::internal::kTaggedSize;
-using v8::internal::ExternalPointer_t;
-using v8::internal::CppHeapPointer_t;
-using v8::internal::IndirectPointerHandle;
+// Use values from nuclear-fix-v2.h when building for WASI
+#ifdef __wasi__
+// These are already defined in nuclear-fix-v2.h
+#else
+using v8::internal::kSmiValueSize;
+using v8::internal::kSystemPointerSize;
+using v8::internal::kTaggedSize;
+using v8::internal::ExternalPointer_t;
+using v8::internal::CppHeapPointer_t;
+using v8::internal::IndirectPointerHandle;
+#endif
 
 }  // namespace internal
 }  // namespace v8
+
+// Ensure MB is defined for WASI
+#ifdef __wasi__
+#include "../../include/wasi/nuclear-fix-v2.h"
+#endif
 
 namespace i = v8::internal;
 
@@ -645,7 +655,11 @@
 #endif
 using AtomicTagged_t = base::Atomic32;
 #endif
+
+#ifndef __wasi__
 using AsAtomicTagged = base::AsAtomicPointerImpl<AtomicTagged_t>;
+#endif
+
 STATIC_ASSERT(sizeof(Tagged_t) == kTaggedSize);
 STATIC_ASSERT(sizeof(AtomicTagged_t) == kTaggedSize);
 
@@ -1518,8 +1532,13 @@
   kLastGC = kIncrementalMarkingPreciseStep,
 };
 
+#ifdef __wasi__
+// Match the value from nuclear-fix-v2.h
+STATIC_ASSERT(kGarbageCollectionReasonMaxValue == 30);
+#else
 STATIC_ASSERT(kGarbageCollectionReasonMaxValue ==
                   static_cast<int>(GarbageCollectionReason::NUM_REASONS) - 1);
+#endif
 
 inline size_t hash_value(GarbageCollectionReason reason) {
   return static_cast<size_t>(reason);
@@ -1775,7 +1798,9 @@
 // The Strict/Sloppy mode is a subset of the LanguageMode enum (only kStrict
 // and kSloppy values are allowed), it is used in scalar contexts where only
 // strict/sloppy information is relevant.
+#ifndef __wasi__
   kThrowOnError = Internals::kThrowOnError,
+#endif
   kDontThrow = Internals::kDontThrow
 };
 
@@ -1928,7 +1957,11 @@
   return os;
 }
 
+#ifdef __wasi__
+inline uint8_t InterpreterPushArgsMode(ConvertReceiverMode receiver_mode,
+#else
 inline uint8_t InterpreterPushArgsMode(ConvertReceiverMode receiver_mode,
+#endif
                                         InterpreterPushArgsMode mode) {
   return base::bit_cast<uint8_t>(mode) |
          (base::bit_cast<uint8_t>(receiver_mode) << 4);
